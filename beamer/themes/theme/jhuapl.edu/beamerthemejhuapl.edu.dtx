% \iffalse meta-comment
%
% Copyright (C) 2014 by Joel Coffman
% -----------------------------------
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.2
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%   http://www.latex-project.org/lppl.txt
%
% and version 1.2 or later is part of all distributions of LaTeX
% version 1999/12/01 or later.
%
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{beamerthemejhuapl.edu}
%<package>  [2017/01/02 v0.1.4 Beamer theme for JHU/APL]
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{beamerarticle}

\input{.version}
\usepackage{beamerthemejhuapl.edu}

\usepackage{graphicx}
\usepackage{minted}

\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{beamerthemejhuapl.edu.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
% {Upper-case   \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
% Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
% Digits        \0\1\2\3\4\5\6\7\8\9
% Exclamation   \!     Double quote  \"     Hash (number) \#
% Dollar        \$     Percent       \%     Ampersand     \&
% Acute accent  \'     Left paren    \(     Right paren   \)
% Asterisk      \*     Plus          \+     Comma         \,
% Minus         \-     Point         \.     Solidus       \/
% Colon         \:     Semicolon     \;     Less than     \<
% Equals        \=     Greater than  \>     Question mark \?
% Commercial at \@     Left bracket  \[     Backslash     \\
% Right bracket \]     Circumflex    \^     Underscore    \_
% Grave accent  \`     Left brace    \{     Vertical bar  \|
% Right brace   \}     Tilde         \~}
%
%
% \changes{0.1.0}{2015/11/25}{%
%   Initial version
% }
% \changes{0.1.2}{2016/02/19}{%
%   Correct package name in ProvidesPackage macro
% }
%
% \GetFileInfo{beamerthemejhuapl.edu.sty}
%
% \DoNotIndex{\#,\$,\%,\&,\@,\\,\{,\},\^,\_,\~,\ }
% \DoNotIndex{\@ne}
% \DoNotIndex{\advance,\begingroup,\catcode,\closein}
% \DoNotIndex{\closeout,\day,\def,\edef,\else,\empty,\endgroup}
% \DoNotIndex{\global,\let,\relax}
%
% \title{
%   The \textsf{beamerthemejhuapl.edu} package\thanks{%
%     This document corresponds to \protect\textsf{beamerthemejhuapl.edu}~\fileversion-\version, dated \filedate.
%   }
% }
% \author{Joel Coffman\\\texttt{joel.coffman@jhu.edu}}
%
% \maketitle
%
% \begin{abstract}
% A Beamer theme for the Johns Hopkins University Applied Physics Laboratory.
% \end{abstract}
%
% \StopEventually{
%   \PrintChanges
%   \PrintIndex
% }
%
% \section{Usage}
% Per Beamer's documentation, this color theme should be loaded via the following command:
% \begin{VerbatimOut}[
%     gobble=1,
% ]{minted/useroutertheme.out}
% \usetheme{jhuapl.edu}
% \end{VerbatimOut}
% \inputminted[
%     gobble=1,
% ]{latex}{minted/useroutertheme.out}
%
% The following images illustrate the theme's style.
%
% \begin{figure}[!h]
%    \includegraphics[
%        page=1,
%        width=0.49\linewidth,
%    ]{example}
%    \hfill
%    \includegraphics[
%        page=2,
%        width=0.49\linewidth,
%    ]{example}
% \end{figure}
%
% \appendix
%
% \iffalse
%<*package>
% \fi
%
% \section{Implementation}
% See Beamer's documentation and the implementation of various themes for more information about the color palettes and color commands.
%
% \subsection{Required Packages}
% Use \textsf{jhu.edu} theme for the basic style.
%    \begin{macrocode}
\usetheme{jhu.edu}
%    \end{macrocode}
% \changes{0.1.3}{2016/10/13}{
%   Inherit from the jhu.edu theme
% }
%
% \subsection{Configuration}
%
% \begin{macro}{logo}
% Use JHU/APL's logo.
%    \begin{macrocode}
\logo{
  \includegraphics[
      clip,
      trim=15 35 15 35,
      width=0.34\paperwidth,
  ]{{apl.logo.small.horizontal.white}.eps}
}
%    \end{macrocode}
% \changes{0.1.1}{2015/11/26}{
%   Adjust trim to vertically center logo
% }
% \changes{0.1.4}{2017/01/02}{
%   Adjust trim to match decreased width of logo (v0.1.3 of logo package)
% }
% \end{macro}
%
% \iffalse
%</package>
% \fi
%
% \Finale
%\iffalse
%<*apl.logo.small.horizontal.white.eps>
%
%<<apl.logo.small.horizontal.white.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: apl.logo.small.horizontal.white.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Eric Conrad
%%CreationDate: 6/18/13
%%BoundingBox: 0 0 313 129
%%HiResBoundingBox: 0 0 313 129
%%CropBox: 0 0 313 129
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
%%EndPageSetup
1 -1 scale 0 -129 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 129 li
313 129 li
313 0 li
cp
clp
gsave
43.1602 86.375 mo
83.4131 86.375 li
83.4131 43.002 li
43.1602 43.002 li
43.1602 86.375 li
cp
clp
62.6313 62.1323 mo
62.6313 54.5044 li
64.7334 54.5122 66.4321 56.2163 66.4321 58.3193 cv
66.4321 60.4194 64.7334 62.126 62.6313 62.1323 cv
62.6313 52.668 mo
62.6313 52.668 li
60.793 52.668 li
60.793 68.165 li
62.6313 68.165 li
62.6313 63.9663 li
65.7461 63.96 68.27 61.4351 68.27 58.3193 cv
68.27 55.2021 65.7461 52.6763 62.6313 52.668 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
57.498 56.0068 mo
57.498 62.0708 li
52.9082 62.0708 li
53.9189 59.687 55.5088 57.6089 57.498 56.0068 cv
49.855 68.168 mo
51.6699 68.168 li
51.6699 66.7129 51.8701 65.3047 52.2412 63.9707 cv
57.498 63.9707 li
57.4971 68.166 li
59.335 68.166 li
59.335 52.6626 li
53.708 55.5498 49.855 61.4067 49.855 68.168 cv
f
71.0684 52.6724 mo
69.23 52.6724 li
69.23 68.166 li
69.3521 68.166 li
71.0684 68.166 li
77.0063 68.166 li
77.0063 66.3945 li
71.0684 66.3945 li
71.0684 52.6724 li
cp
f
82.0942 50.4146 mo
82.0942 72.0605 69.2622 81.8018 63.7524 84.7217 cv
63.4541 84.8857 63.1685 84.9063 62.8135 84.7178 cv
57.2974 81.7959 44.4775 72.0527 44.4775 50.4146 cv
44.4761 47.1504 li
44.4761 46.7056 44.7803 46.3345 45.1924 46.2324 cv
45.2153 46.2275 li
51.0425 44.9785 57.0864 44.3184 63.2852 44.3184 cv
69.4751 44.3184 75.5122 44.9775 81.3335 46.2217 cv
81.3442 46.2275 li
81.7744 46.3145 82.0952 46.6934 82.0952 47.1504 cv
82.0942 50.4146 li
cp
81.8364 44.9966 mo
81.8052 44.9785 li
81.6094 44.9346 li
75.6143 43.6528 69.4482 43.0024 63.2852 43.0024 cv
57.1133 43.0024 50.9414 43.6548 44.9414 44.9395 cv
44.9165 44.9458 li
44.8691 44.9575 li
43.8623 45.2114 43.1582 46.1138 43.1582 47.1504 cv
43.1602 50.4165 li
43.1602 73.9619 57.7314 83.5146 62.1973 85.8818 cv
62.5562 86.0703 62.9253 86.1689 63.2944 86.1689 cv
63.6685 86.1689 64.0371 86.0684 64.3931 85.8721 cv
68.8364 83.5186 83.4111 73.9678 83.4111 50.4146 cv
83.4111 47.1504 li
83.4111 46.1606 82.7612 45.2896 81.8364 44.9966 cv
f
grestore
gsave
89.875 72.498 mo
269.875 72.498 li
269.875 47.918 li
89.875 47.918 li
89.875 72.498 li
cp
clp
95.0234 52.3281 mo
95.0234 49.1689 94.7402 48.8281 93.0605 48.6851 cv
92.3506 48.6289 li
92.1792 48.5151 92.2363 48.0029 92.4072 47.918 cv
94.0566 47.9741 95.0234 48.0029 96.2183 48.0029 cv
97.3574 48.0029 98.3242 47.9741 99.4624 47.918 cv
99.6323 48.0029 99.6895 48.5151 99.5195 48.6289 cv
99.0923 48.6851 li
97.4146 48.9141 97.3574 49.3101 97.3574 52.3281 cv
97.3574 62.8833 li
97.3574 65.1289 97.2422 67.0918 96.7036 68.4004 cv
95.7632 70.6777 93.7446 72.498 91.0972 72.498 cv
90.7573 72.498 89.8755 72.4688 89.8755 71.9004 cv
89.8755 71.416 90.3003 70.5898 90.8984 70.5898 cv
91.2402 70.5898 91.5825 70.6465 91.9521 70.7617 cv
92.3506 70.875 92.7485 70.9609 93.1465 70.9609 cv
93.7446 70.9609 94.0864 70.6191 94.2852 70.2207 cv
94.9395 68.8828 95.0234 64.6172 95.0234 63.0801 cv
95.0234 52.3281 li
cp
false sop
0 0 0 0 cmyk
f
113.931 59.5313 mo
113.931 55.5723 112.18 51.2993 107.596 51.2993 cv
105.099 51.2993 101.86 53.0044 101.86 58.2603 cv
101.86 61.8101 103.588 66.4199 108.314 66.4199 cv
111.196 66.4199 113.931 64.2603 113.931 59.5313 cv
99.4585 59.0273 mo
99.4585 54.228 103.06 50.5552 108.003 50.5552 cv
113.547 50.5552 116.331 54.563 116.331 58.7871 cv
116.331 63.6353 112.635 67.1621 108.003 67.1621 cv
102.676 67.1621 99.4585 63.3472 99.4585 59.0273 cv
f
121.783 59.0273 mo
120.631 59.0273 120.583 59.0762 120.583 59.7974 cv
120.583 63.1792 li
120.583 65.6992 120.703 66.0352 122.047 66.1797 cv
122.742 66.252 li
122.887 66.3477 122.838 66.7793 122.695 66.8516 cv
121.398 66.8027 120.583 66.7793 119.646 66.7793 cv
118.615 66.7793 117.799 66.8281 116.863 66.8516 cv
116.719 66.7793 116.672 66.3945 116.814 66.252 cv
117.222 66.1797 li
118.566 65.9395 118.615 65.6992 118.615 63.1792 cv
118.615 54.5391 li
118.615 52.0195 118.447 51.6123 117.199 51.5151 cv
116.574 51.4673 li
116.43 51.3711 116.479 50.9395 116.623 50.8672 cv
117.799 50.8901 118.615 50.9395 119.646 50.9395 cv
120.583 50.9395 121.398 50.9165 122.43 50.8672 cv
122.574 50.9395 122.623 51.3711 122.478 51.4673 cv
122.022 51.5151 li
120.631 51.6592 120.583 52.0195 120.583 54.5391 cv
120.583 57.3003 li
120.583 58.0435 120.631 58.0684 121.783 58.0684 cv
128.647 58.0684 li
129.799 58.0684 129.848 58.0435 129.848 57.3003 cv
129.848 54.5391 li
129.848 52.0195 129.799 51.6592 128.383 51.5151 cv
127.928 51.4673 li
127.783 51.3711 127.83 50.9395 127.975 50.8672 cv
129.078 50.9165 129.895 50.9395 130.879 50.9395 cv
131.815 50.9395 132.631 50.9165 133.711 50.8672 cv
133.853 50.9395 133.902 51.3711 133.76 51.4673 cv
133.254 51.5151 li
131.864 51.6592 131.815 52.0195 131.815 54.5391 cv
131.815 63.1792 li
131.815 65.6992 131.864 66.0117 133.254 66.1797 cv
133.83 66.252 li
133.974 66.3477 133.926 66.7793 133.781 66.8516 cv
132.631 66.8027 131.815 66.7793 130.879 66.7793 cv
129.895 66.7793 129.032 66.8027 127.975 66.8516 cv
127.83 66.7793 127.783 66.3945 127.928 66.252 cv
128.383 66.1797 li
129.848 65.9395 129.848 65.6992 129.848 63.1792 cv
129.848 59.7974 li
129.848 59.0762 129.799 59.0273 128.647 59.0273 cv
121.783 59.0273 li
cp
f
150.225 62.6992 mo
150.225 63.4204 150.225 66.2754 150.294 66.8984 cv
150.248 67.043 150.104 67.1621 149.839 67.1621 cv
149.553 66.7559 148.855 65.916 146.768 63.5391 cv
141.2 57.2031 li
140.553 56.459 138.919 54.4912 138.416 53.9653 cv
138.37 53.9653 li
138.271 54.2524 138.248 54.8032 138.248 55.5234 cv
138.248 60.7563 li
138.248 61.8833 138.271 65.0039 138.68 65.7227 cv
138.825 65.9883 139.305 66.1309 139.905 66.1797 cv
140.648 66.252 li
140.792 66.4434 140.768 66.7324 140.6 66.8516 cv
139.52 66.8027 138.68 66.7793 137.792 66.7793 cv
136.784 66.7793 136.137 66.8027 135.296 66.8516 cv
135.128 66.7324 135.105 66.3945 135.248 66.252 cv
135.896 66.1797 li
136.448 66.1074 136.832 65.9629 136.954 65.6992 cv
137.287 64.8364 137.264 61.9082 137.264 60.7563 cv
137.264 53.8203 li
137.264 53.147 137.241 52.6421 136.737 52.0923 cv
136.4 51.7563 135.825 51.5874 135.248 51.5151 cv
134.839 51.4683 li
134.696 51.3242 134.696 50.9653 134.889 50.8672 cv
135.896 50.9395 137.167 50.9395 137.6 50.9395 cv
137.984 50.9395 138.393 50.916 138.705 50.8672 cv
139.184 52.0923 142.016 55.2603 142.809 56.1484 cv
145.137 58.7632 li
146.791 60.6113 147.967 61.9551 149.096 63.1074 cv
149.145 63.1074 li
149.241 62.9883 149.241 62.603 149.241 62.0991 cv
149.241 56.9634 li
149.241 55.835 149.217 52.7163 148.76 51.9951 cv
148.616 51.7793 148.232 51.6353 147.271 51.5151 cv
146.864 51.4683 li
146.696 51.3242 146.721 50.9395 146.912 50.8672 cv
148.016 50.916 148.832 50.9395 149.745 50.9395 cv
150.775 50.9395 151.398 50.916 152.214 50.8672 cv
152.409 50.9883 152.409 51.3242 152.264 51.4683 cv
151.928 51.5151 li
151.161 51.6353 150.68 51.8281 150.583 52.019 cv
150.176 52.8833 150.225 55.8594 150.225 56.9634 cv
150.225 62.6992 li
cp
f
156.568 67.1621 mo
154.55 67.1621 153.279 66.5391 152.824 66.2754 cv
152.535 65.7461 152.222 64.043 152.175 62.916 cv
152.295 62.7461 152.656 62.6992 152.752 62.8442 cv
153.111 64.0659 154.095 66.4199 156.879 66.4199 cv
158.895 66.4199 159.879 65.0986 159.879 63.6602 cv
159.879 62.603 159.664 61.4282 157.91 60.2993 cv
155.631 58.8101 li
154.432 58.019 153.04 56.6499 153.04 54.6831 cv
153.04 52.4033 154.816 50.5562 157.936 50.5562 cv
158.68 50.5562 159.543 50.7002 160.168 50.8672 cv
160.479 50.9653 160.814 51.0122 161.006 51.0122 cv
161.223 51.5869 161.439 52.9321 161.439 53.939 cv
161.344 54.084 160.959 54.1553 160.839 54.0122 cv
160.527 52.8589 159.879 51.2993 157.574 51.2993 cv
155.222 51.2993 154.718 52.8589 154.718 53.9653 cv
154.718 55.355 155.872 56.3633 156.76 56.916 cv
158.68 58.1152 li
160.191 59.0513 161.68 60.4429 161.68 62.7231 cv
161.68 65.3633 159.688 67.1621 156.568 67.1621 cv
f
175.924 57.5918 mo
174.559 57.5918 174.502 57.647 174.502 58.5 cv
174.502 62.5117 li
174.502 65.498 174.643 65.8965 176.235 66.0684 cv
177.063 66.1553 li
177.232 66.2676 177.176 66.7803 177.004 66.8633 cv
175.469 66.8066 174.502 66.7803 173.393 66.7803 cv
172.168 66.7803 171.201 66.8359 170.092 66.8633 cv
169.92 66.7803 169.863 66.3242 170.035 66.1553 cv
170.518 66.0684 li
172.11 65.7832 172.168 65.498 172.168 62.5117 cv
172.168 52.27 li
172.168 49.2827 171.969 48.7988 170.49 48.686 cv
169.75 48.6289 li
169.58 48.5156 169.637 48.0029 169.807 47.918 cv
171.201 47.9458 172.168 48.0029 173.393 48.0029 cv
174.502 48.0029 175.469 47.9746 176.691 47.918 cv
176.863 48.0029 176.92 48.5156 176.748 48.6289 cv
176.207 48.686 li
174.559 48.8579 174.502 49.2827 174.502 52.27 cv
174.502 55.542 li
174.502 56.4238 174.559 56.4507 175.924 56.4507 cv
184.061 56.4507 li
185.426 56.4507 185.482 56.4238 185.482 55.542 cv
185.482 52.27 li
185.482 49.2827 185.426 48.8579 183.746 48.686 cv
183.205 48.6289 li
183.035 48.5156 183.092 48.0029 183.264 47.918 cv
184.569 47.9746 185.539 48.0029 186.705 48.0029 cv
187.814 48.0029 188.783 47.9746 190.063 47.918 cv
190.232 48.0029 190.291 48.5156 190.119 48.6289 cv
189.521 48.686 li
187.873 48.8579 187.814 49.2827 187.814 52.27 cv
187.814 62.5117 li
187.814 65.498 187.873 65.8691 189.521 66.0684 cv
190.205 66.1553 li
190.375 66.2676 190.318 66.7803 190.146 66.8633 cv
188.783 66.8066 187.814 66.7803 186.705 66.7803 cv
185.539 66.7803 184.516 66.8066 183.264 66.8633 cv
183.092 66.7803 183.035 66.3242 183.205 66.1553 cv
183.746 66.0684 li
185.482 65.7832 185.482 65.498 185.482 62.5117 cv
185.482 58.5 li
185.482 57.647 185.426 57.5918 184.061 57.5918 cv
175.924 57.5918 li
cp
f
204.496 59.5313 mo
204.496 55.5723 202.746 51.2993 198.16 51.2993 cv
195.666 51.2993 192.426 53.0044 192.426 58.2603 cv
192.426 61.8101 194.154 66.4199 198.881 66.4199 cv
201.762 66.4199 204.496 64.2603 204.496 59.5313 cv
190.025 59.0273 mo
190.025 54.228 193.627 50.5552 198.568 50.5552 cv
204.113 50.5552 206.896 54.563 206.896 58.7871 cv
206.896 63.6353 203.201 67.1621 198.568 67.1621 cv
193.242 67.1621 190.025 63.3472 190.025 59.0273 cv
f
211.24 63.1797 mo
211.24 65.6992 211.289 66.0117 212.824 66.1797 cv
213.473 66.252 li
213.617 66.3711 213.57 66.7793 213.424 66.8516 cv
212.057 66.8027 211.266 66.7793 210.305 66.7793 cv
209.297 66.7793 208.434 66.8027 207.377 66.8516 cv
207.232 66.7793 207.186 66.3945 207.33 66.252 cv
207.834 66.1797 li
209.225 65.9883 209.273 65.6992 209.273 63.1797 cv
209.273 54.3247 li
209.273 52.2837 209.225 51.8755 208.145 51.7554 cv
207.281 51.6587 li
207.113 51.5156 207.136 51.1558 207.33 51.0596 cv
208.602 50.8906 210.09 50.8667 212.08 50.8667 cv
214.072 50.8667 215.561 51.1304 216.689 51.8276 cv
217.793 52.5234 218.609 53.7715 218.609 55.4268 cv
218.609 57.6348 217.242 58.7407 216.209 59.2437 cv
215.152 59.7476 213.881 59.9624 212.896 59.9624 cv
212.729 59.8926 212.729 59.5317 212.873 59.4844 cv
215.465 59.0034 216.4 57.5386 216.4 55.4517 cv
216.4 53.1226 215.033 51.6128 212.537 51.6128 cv
211.266 51.6128 211.24 51.7065 211.24 52.4766 cv
211.24 63.1797 li
cp
f
221.227 54.5391 mo
221.227 52.019 221.178 51.6348 219.787 51.5161 cv
219.186 51.4678 li
219.043 51.3711 219.092 50.939 219.234 50.8672 cv
220.41 50.916 221.178 50.939 222.258 50.939 cv
223.193 50.939 224.01 50.916 225.043 50.8672 cv
225.186 50.939 225.234 51.3711 225.09 51.4678 cv
224.635 51.5161 li
223.242 51.6592 223.193 52.019 223.193 54.5391 cv
223.193 57.3008 li
223.193 57.7559 223.242 58.2109 223.508 58.2109 cv
223.723 58.2109 224.01 58.0679 224.178 57.9468 cv
224.514 57.6602 225.139 57.0352 225.402 56.7949 cv
227.994 54.228 li
228.449 53.7949 229.627 52.5708 229.865 52.2358 cv
229.986 52.0669 230.035 51.9468 230.035 51.8511 cv
230.035 51.7559 229.939 51.6841 229.627 51.6118 cv
228.979 51.4678 li
228.811 51.2988 228.834 50.9878 229.025 50.8672 cv
229.865 50.916 230.826 50.939 231.666 50.939 cv
232.506 50.939 233.322 50.916 234.041 50.8672 cv
234.211 50.9878 234.234 51.3242 234.09 51.4678 cv
233.467 51.5161 232.531 51.7559 231.859 52.1401 cv
231.188 52.5229 229.842 53.6509 228.498 54.9238 cv
226.338 56.9629 li
226.002 57.3008 225.785 57.5161 225.785 57.707 cv
225.785 57.877 225.93 58.0679 226.242 58.4512 cv
228.521 61.0659 230.369 63.2271 232.242 65.1953 cv
232.818 65.7715 233.256 66.084 234.07 66.1797 cv
234.533 66.252 li
234.703 66.3711 234.654 66.7793 234.484 66.8516 cv
233.861 66.8027 233.203 66.7793 232.074 66.7793 cv
231.092 66.7793 230.25 66.8027 229.146 66.8516 cv
228.979 66.8027 228.906 66.3936 229.051 66.252 cv
229.602 66.1543 li
229.939 66.1074 230.178 66.0352 230.178 65.916 cv
230.178 65.7715 230.01 65.5801 229.842 65.3633 cv
229.385 64.7871 228.762 64.1392 227.85 63.1069 cv
225.93 60.9468 li
224.563 59.4121 224.178 58.9321 223.602 58.9321 cv
223.242 58.9321 223.193 59.2441 223.193 60.084 cv
223.193 63.1802 li
223.193 65.6992 223.242 66.0352 224.586 66.1797 cv
225.234 66.252 li
225.377 66.3477 225.331 66.7793 225.186 66.8516 cv
224.01 66.8027 223.193 66.7793 222.258 66.7793 cv
221.273 66.7793 220.459 66.8027 219.475 66.8516 cv
219.331 66.7793 219.281 66.4199 219.426 66.252 cv
219.906 66.1797 li
221.178 65.9883 221.227 65.6992 221.227 63.1802 cv
221.227 54.5391 li
cp
f
237.699 54.5879 mo
237.699 52.0439 237.652 51.6348 236.234 51.5156 cv
235.636 51.4678 li
235.492 51.3706 235.539 50.9399 235.684 50.8667 cv
236.883 50.916 237.699 50.9399 238.707 50.9399 cv
239.668 50.9399 240.484 50.916 241.684 50.8667 cv
241.828 50.9399 241.875 51.3706 241.732 51.4678 cv
241.131 51.5156 li
239.715 51.6348 239.668 52.0439 239.668 54.5879 cv
239.668 63.1309 li
239.668 65.6758 239.715 66.0117 241.131 66.1797 cv
241.732 66.252 li
241.875 66.3477 241.828 66.7783 241.684 66.8516 cv
240.484 66.8027 239.668 66.7783 238.707 66.7783 cv
237.699 66.7783 236.975 66.8027 235.775 66.8516 cv
235.631 66.7783 235.584 66.3945 235.729 66.252 cv
236.234 66.1797 li
237.652 66.0117 237.699 65.6758 237.699 63.1309 cv
237.699 54.5879 li
cp
f
258.459 62.6992 mo
258.459 63.4204 258.459 66.2754 258.533 66.8984 cv
258.484 67.043 258.34 67.1621 258.076 67.1621 cv
257.789 66.7559 257.092 65.916 255.004 63.5391 cv
249.436 57.2031 li
248.789 56.459 247.156 54.4912 246.652 53.9653 cv
246.605 53.9653 li
246.508 54.2524 246.484 54.8032 246.484 55.5234 cv
246.484 60.7563 li
246.484 61.8833 246.508 65.0039 246.916 65.7227 cv
247.061 65.9883 247.541 66.1309 248.141 66.1797 cv
248.885 66.252 li
249.027 66.4434 249.004 66.7324 248.836 66.8516 cv
247.756 66.8027 246.916 66.7793 246.029 66.7793 cv
245.021 66.7793 244.373 66.8027 243.533 66.8516 cv
243.365 66.7324 243.34 66.3945 243.484 66.252 cv
244.133 66.1797 li
244.684 66.1074 245.068 65.9629 245.189 65.6992 cv
245.525 64.8364 245.5 61.9082 245.5 60.7563 cv
245.5 53.8203 li
245.5 53.147 245.477 52.6421 244.973 52.0923 cv
244.637 51.7563 244.061 51.5874 243.484 51.5151 cv
243.076 51.4683 li
242.932 51.3242 242.932 50.9653 243.125 50.8672 cv
244.133 50.9395 245.404 50.9395 245.836 50.9395 cv
246.221 50.9395 246.629 50.916 246.941 50.8672 cv
247.422 52.0923 250.252 55.2603 251.043 56.1484 cv
253.373 58.7632 li
255.029 60.6113 256.203 61.9551 257.332 63.1074 cv
257.381 63.1074 li
257.477 62.9883 257.477 62.603 257.477 62.0991 cv
257.477 56.9634 li
257.477 55.835 257.453 52.7163 256.996 51.9951 cv
256.852 51.7793 256.469 51.6353 255.51 51.5151 cv
255.102 51.4683 li
254.932 51.3242 254.957 50.9395 255.148 50.8672 cv
256.252 50.916 257.068 50.9395 257.98 50.9395 cv
259.014 50.9395 259.637 50.916 260.451 50.8672 cv
260.645 50.9883 260.645 51.3242 260.5 51.4683 cv
260.164 51.5151 li
259.396 51.6353 258.916 51.8281 258.82 52.019 cv
258.412 52.8833 258.459 55.8594 258.459 56.9634 cv
258.459 62.6992 li
cp
f
264.764 67.1621 mo
262.746 67.1621 261.475 66.5391 261.018 66.2754 cv
260.73 65.7461 260.418 64.043 260.369 62.916 cv
260.49 62.7461 260.852 62.6992 260.945 62.8442 cv
261.307 64.0659 262.291 66.4199 265.074 66.4199 cv
267.09 66.4199 268.074 65.0986 268.074 63.6602 cv
268.074 62.603 267.857 61.4282 266.105 60.2993 cv
263.828 58.8101 li
262.627 58.019 261.234 56.6499 261.234 54.6831 cv
261.234 52.4033 263.01 50.5562 266.131 50.5562 cv
266.875 50.5562 267.738 50.7002 268.363 50.8672 cv
268.676 50.9653 269.01 51.0122 269.201 51.0122 cv
269.418 51.5869 269.635 52.9321 269.635 53.939 cv
269.537 54.084 269.154 54.1553 269.033 54.0122 cv
268.723 52.8589 268.074 51.2993 265.771 51.2993 cv
263.418 51.2993 262.914 52.8589 262.914 53.9653 cv
262.914 55.355 264.066 56.3633 264.953 56.916 cv
266.875 58.1152 li
268.387 59.0513 269.875 60.4429 269.875 62.7231 cv
269.875 65.3633 267.883 67.1621 264.764 67.1621 cv
f
grestore
gsave
0 0 mo
313 0 li
313 129 li
0 129 li
0 0 li
cp
clp
84.8809 81.7188 mo
84.7808 82.0039 84.7939 82.0166 85.1411 82.0166 cv
86.667 82.0166 li
87.0269 82.0166 87.0518 81.9668 86.9399 81.6318 cv
86.27 79.6104 li
86.1709 79.3125 86.0601 78.9775 85.9849 78.8281 cv
85.96 78.8281 li
85.9229 78.8906 85.7988 79.1885 85.6621 79.5605 cv
84.8809 81.7188 li
cp
87.3369 82.8223 mo
87.25 82.5498 87.2007 82.5127 86.8281 82.5127 cv
84.9551 82.5127 li
84.645 82.5127 84.5698 82.5498 84.4849 82.8105 cv
84.0498 84.1133 li
83.8628 84.6719 83.7769 85.0068 83.7769 85.1426 cv
83.7769 85.292 83.8389 85.3652 84.1367 85.3906 cv
84.5459 85.4287 li
84.6328 85.4893 84.6328 85.6885 84.522 85.7383 cv
84.1987 85.7139 83.8149 85.7139 83.231 85.7012 cv
82.8208 85.7012 82.375 85.7256 82.04 85.7383 cv
81.9648 85.6885 81.9419 85.4893 82.0161 85.4287 cv
82.4238 85.3906 li
82.7227 85.3652 82.9951 85.2295 83.1689 84.7822 cv
83.3931 84.2129 83.7397 83.4053 84.2607 82.0166 cv
85.5259 78.667 li
85.6987 78.2207 85.7739 77.9854 85.7358 77.7861 cv
86.0347 77.6982 86.2461 77.4766 86.3818 77.3154 cv
86.4561 77.3154 86.543 77.3398 86.5679 77.4268 cv
86.729 77.9727 86.9277 78.543 87.1128 79.0889 cv
88.814 84.0762 li
89.1729 85.1426 89.334 85.3291 89.8667 85.3906 cv
90.2031 85.4287 li
90.2891 85.4893 90.2646 85.6885 90.2031 85.7383 cv
89.6938 85.7139 89.2598 85.7012 88.7007 85.7012 cv
88.1069 85.7012 87.6348 85.7256 87.2759 85.7383 cv
87.1758 85.6885 87.1641 85.4893 87.25 85.4287 cv
87.6099 85.3906 li
87.8711 85.3652 88.0439 85.292 88.0439 85.168 cv
88.0439 85.0313 87.9829 84.8076 87.8828 84.5098 cv
87.3369 82.8223 li
cp
false sop
0 0 0 0 cmyk
f
93.2383 83.8408 mo
93.2383 85.1426 93.2632 85.3047 94.0562 85.3906 cv
94.3921 85.4287 li
94.4673 85.4902 94.4414 85.7012 94.3672 85.7383 cv
93.6602 85.7139 93.2515 85.7012 92.7544 85.7012 cv
92.2334 85.7012 91.7871 85.7139 91.2412 85.7383 cv
91.1665 85.7012 91.1421 85.5029 91.2173 85.4287 cv
91.4761 85.3906 li
92.1963 85.292 92.2202 85.1426 92.2202 83.8408 cv
92.2202 79.2627 li
92.2202 78.208 92.1963 77.9971 91.6382 77.9355 cv
91.1914 77.8857 li
91.1045 77.8115 91.1172 77.625 91.2173 77.5752 cv
91.8745 77.4893 92.6421 77.4766 93.6733 77.4766 cv
94.7021 77.4766 95.4702 77.6133 96.0542 77.9727 cv
96.6255 78.332 97.0474 78.9775 97.0474 79.833 cv
97.0474 80.9746 96.3403 81.5449 95.8062 81.8057 cv
95.2603 82.0664 94.6035 82.1777 94.0933 82.1777 cv
94.0083 82.1406 94.0083 81.9551 94.0825 81.9297 cv
95.4224 81.6816 95.9063 80.9248 95.9063 79.8457 cv
95.9063 78.6426 95.1982 77.8613 93.9082 77.8613 cv
93.2515 77.8613 93.2383 77.9102 93.2383 78.3076 cv
93.2383 83.8408 li
cp
f
100.344 83.8408 mo
100.344 85.1426 100.368 85.3047 101.162 85.3906 cv
101.497 85.4287 li
101.573 85.4902 101.547 85.7012 101.473 85.7383 cv
100.766 85.7139 100.356 85.7012 99.8599 85.7012 cv
99.3379 85.7012 98.8926 85.7139 98.3457 85.7383 cv
98.272 85.7012 98.2466 85.5029 98.3218 85.4287 cv
98.582 85.3906 li
99.3008 85.292 99.3257 85.1426 99.3257 83.8408 cv
99.3257 79.2627 li
99.3257 78.208 99.3008 77.9971 98.7427 77.9355 cv
98.2969 77.8857 li
98.209 77.8115 98.2227 77.625 98.3218 77.5752 cv
98.979 77.4893 99.748 77.4766 100.778 77.4766 cv
101.807 77.4766 102.576 77.6133 103.16 77.9727 cv
103.731 78.332 104.153 78.9775 104.153 79.833 cv
104.153 80.9746 103.446 81.5449 102.911 81.8057 cv
102.365 82.0664 101.708 82.1777 101.199 82.1777 cv
101.113 82.1406 101.113 81.9551 101.188 81.9297 cv
102.528 81.6816 103.011 80.9248 103.011 79.8457 cv
103.011 78.6426 102.304 77.8613 101.014 77.8613 cv
100.356 77.8613 100.344 77.9102 100.344 78.3076 cv
100.344 83.8408 li
cp
f
106.443 79.374 mo
106.443 78.0723 106.419 77.873 105.637 77.8115 cv
105.327 77.7861 li
105.253 77.7373 105.277 77.5137 105.352 77.4766 cv
106.047 77.501 106.468 77.5137 106.964 77.5137 cv
107.449 77.5137 107.872 77.501 108.49 77.4766 cv
108.564 77.5137 108.589 77.7373 108.516 77.7861 cv
108.217 77.8115 li
107.486 77.873 107.461 78.0723 107.461 79.374 cv
107.461 83.6914 li
107.461 84.4727 107.499 84.7959 107.721 85.0313 cv
107.857 85.168 108.093 85.3164 109.074 85.3164 cv
110.129 85.3164 110.388 85.2666 110.588 85.1553 cv
110.836 85.0068 111.158 84.5596 111.406 83.9268 cv
111.48 83.8652 111.716 83.915 111.716 84.002 cv
111.716 84.1377 111.37 85.4033 111.195 85.7383 cv
110.563 85.7139 109.383 85.7012 108.105 85.7012 cv
106.964 85.7012 li
106.443 85.7012 106.047 85.7139 105.352 85.7383 cv
105.277 85.7012 105.253 85.5029 105.327 85.4287 cv
105.699 85.3906 li
106.419 85.3164 106.443 85.1426 106.443 83.8408 cv
106.443 79.374 li
cp
f
113.908 79.3994 mo
113.908 78.084 113.883 77.873 113.151 77.8115 cv
112.842 77.7861 li
112.767 77.7373 112.791 77.5137 112.866 77.4766 cv
113.486 77.501 113.908 77.5137 114.429 77.5137 cv
114.926 77.5137 115.347 77.501 115.967 77.4766 cv
116.042 77.5137 116.066 77.7373 115.992 77.7861 cv
115.681 77.8115 li
114.95 77.873 114.926 78.084 114.926 79.3994 cv
114.926 83.8154 li
114.926 85.1309 114.95 85.3047 115.681 85.3906 cv
115.992 85.4287 li
116.066 85.4775 116.042 85.7012 115.967 85.7383 cv
115.347 85.7139 114.926 85.7012 114.429 85.7012 cv
113.908 85.7012 113.486 85.7139 112.866 85.7383 cv
112.791 85.7012 112.767 85.5029 112.842 85.4287 cv
113.151 85.3906 li
113.883 85.3047 113.908 85.1309 113.908 83.8154 cv
113.908 79.3994 li
cp
f
118.72 79.374 mo
118.72 78.084 118.696 77.8984 117.963 77.8115 cv
117.765 77.7861 li
117.689 77.7373 117.715 77.5137 117.789 77.4766 cv
118.323 77.501 118.744 77.5137 119.253 77.5137 cv
121.586 77.5137 li
122.379 77.5137 123.112 77.5137 123.26 77.4766 cv
123.333 77.6865 123.409 78.5801 123.458 79.126 cv
123.409 79.2012 123.211 79.2256 123.149 79.1514 cv
122.963 78.5684 122.851 78.1338 122.205 77.9727 cv
121.946 77.9102 121.549 77.8984 121.001 77.8984 cv
120.11 77.8984 li
119.737 77.8984 119.737 77.9229 119.737 78.3945 cv
119.737 80.875 li
119.737 81.2227 119.775 81.2227 120.146 81.2227 cv
120.866 81.2227 li
121.387 81.2227 121.771 81.1982 121.92 81.1484 cv
122.07 81.0986 122.157 81.0244 122.219 80.7139 cv
122.318 80.2061 li
122.379 80.1309 122.59 80.1309 122.64 80.2178 cv
122.64 80.5156 122.59 81 122.59 81.4707 cv
122.59 81.918 122.64 82.3887 122.64 82.6621 cv
122.59 82.749 122.379 82.749 122.318 82.6738 cv
122.205 82.1904 li
122.157 81.9668 122.07 81.7813 121.822 81.7188 cv
121.647 81.6689 121.35 81.6572 120.866 81.6572 cv
120.146 81.6572 li
119.775 81.6572 119.737 81.6689 119.737 81.9922 cv
119.737 83.7412 li
119.737 84.3984 119.775 84.8203 119.973 85.0313 cv
120.121 85.1797 120.382 85.3164 121.474 85.3164 cv
122.429 85.3164 122.789 85.2666 123.062 85.1309 cv
123.285 85.0068 123.619 84.5723 123.943 83.9268 cv
124.03 83.8652 124.203 83.9023 124.251 84.0137 cv
124.166 84.4482 123.855 85.4033 123.695 85.7383 cv
122.578 85.7139 121.474 85.7012 120.369 85.7012 cv
119.253 85.7012 li
118.72 85.7012 118.298 85.7139 117.567 85.7383 cv
117.492 85.7012 117.467 85.5029 117.541 85.4287 cv
117.951 85.3906 li
118.658 85.3291 118.72 85.1426 118.72 83.8408 cv
118.72 79.374 li
cp
f
127.599 83.5547 mo
127.599 84.2129 127.637 84.6094 127.847 84.9072 cv
128.12 85.292 128.592 85.416 129.373 85.416 cv
131.78 85.416 132.859 83.8408 132.859 81.5342 cv
132.859 80.168 132.202 77.8613 128.952 77.8613 cv
128.219 77.8613 127.823 77.96 127.723 78.0342 cv
127.623 78.1094 127.599 78.4189 127.599 78.9775 cv
127.599 83.5547 li
cp
126.582 79.126 mo
126.582 78.2578 126.52 77.9971 125.998 77.9229 cv
125.726 77.8857 li
125.626 77.8242 125.614 77.625 125.739 77.5762 cv
126.792 77.5137 127.796 77.4766 128.852 77.4766 cv
129.894 77.4766 130.774 77.5508 131.581 77.8486 cv
133.255 78.4561 134.1 79.8711 134.1 81.5078 cv
134.1 83.084 133.342 84.4355 131.928 85.2051 cv
131.122 85.6387 130.104 85.8008 129.149 85.8008 cv
128.355 85.8008 127.562 85.7012 127.126 85.7012 cv
126.606 85.7012 126.161 85.7139 125.577 85.7383 cv
125.501 85.7012 125.478 85.5029 125.552 85.4287 cv
125.837 85.3906 li
126.557 85.292 126.582 85.1426 126.582 83.8408 cv
126.582 79.126 li
cp
f
141.598 83.8408 mo
141.598 85.1426 141.623 85.3047 142.417 85.3906 cv
142.751 85.4287 li
142.827 85.4902 142.802 85.7012 142.727 85.7383 cv
142.02 85.7139 141.612 85.7012 141.115 85.7012 cv
140.594 85.7012 140.146 85.7139 139.602 85.7383 cv
139.527 85.7012 139.501 85.5029 139.577 85.4287 cv
139.837 85.3906 li
140.557 85.292 140.581 85.1426 140.581 83.8408 cv
140.581 79.2627 li
140.581 78.208 140.557 77.9971 139.998 77.9355 cv
139.551 77.8857 li
139.465 77.8115 139.477 77.625 139.577 77.5752 cv
140.235 77.4893 141.003 77.4766 142.034 77.4766 cv
143.063 77.4766 143.831 77.6133 144.414 77.9727 cv
144.985 78.332 145.407 78.9775 145.407 79.833 cv
145.407 80.9746 144.7 81.5449 144.166 81.8057 cv
143.621 82.0664 142.963 82.1777 142.454 82.1777 cv
142.368 82.1406 142.368 81.9551 142.442 81.9297 cv
143.782 81.6816 144.266 80.9248 144.266 79.8457 cv
144.266 78.6426 143.559 77.8613 142.268 77.8613 cv
141.612 77.8613 141.598 77.9102 141.598 78.3076 cv
141.598 83.8408 li
cp
f
149.485 81.6943 mo
148.889 81.6943 148.865 81.7188 148.865 82.0898 cv
148.865 83.8398 li
148.865 85.1426 148.926 85.3164 149.622 85.3906 cv
149.981 85.4287 li
150.055 85.4775 150.031 85.7012 149.958 85.7383 cv
149.288 85.7139 148.865 85.7012 148.381 85.7012 cv
147.847 85.7012 147.425 85.7256 146.941 85.7383 cv
146.867 85.7012 146.842 85.5029 146.918 85.4287 cv
147.128 85.3906 li
147.822 85.2666 147.847 85.1426 147.847 83.8398 cv
147.847 79.374 li
147.847 78.0723 147.76 77.8613 147.115 77.8115 cv
146.793 77.7861 li
146.718 77.7373 146.744 77.5137 146.818 77.4766 cv
147.425 77.4893 147.847 77.5137 148.381 77.5137 cv
148.865 77.5137 149.288 77.501 149.82 77.4766 cv
149.895 77.5137 149.92 77.7373 149.844 77.7861 cv
149.609 77.8115 li
148.889 77.8857 148.865 78.0723 148.865 79.374 cv
148.865 80.8008 li
148.865 81.1855 148.889 81.1982 149.485 81.1982 cv
153.033 81.1982 li
153.629 81.1982 153.653 81.1855 153.653 80.8008 cv
153.653 79.374 li
153.653 78.0723 153.629 77.8857 152.896 77.8115 cv
152.662 77.7861 li
152.586 77.7373 152.611 77.5137 152.686 77.4766 cv
153.256 77.501 153.677 77.5137 154.188 77.5137 cv
154.67 77.5137 155.091 77.501 155.65 77.4766 cv
155.725 77.5137 155.75 77.7373 155.675 77.7861 cv
155.416 77.8115 li
154.695 77.8857 154.67 78.0723 154.67 79.374 cv
154.67 83.8398 li
154.67 85.1426 154.695 85.3047 155.416 85.3906 cv
155.713 85.4287 li
155.788 85.4775 155.761 85.7012 155.688 85.7383 cv
155.091 85.7139 154.67 85.7012 154.188 85.7012 cv
153.677 85.7012 153.231 85.7139 152.686 85.7383 cv
152.611 85.7012 152.586 85.5029 152.662 85.4287 cv
152.896 85.3906 li
153.653 85.2666 153.653 85.1426 153.653 83.8398 cv
153.653 82.0898 li
153.653 81.7188 153.629 81.6943 153.033 81.6943 cv
149.485 81.6943 li
cp
f
161.029 83.8154 mo
161.029 85.1426 161.104 85.3418 161.773 85.3906 cv
162.245 85.4287 li
162.32 85.502 162.295 85.7012 162.221 85.7383 cv
161.451 85.7139 161.029 85.7012 160.533 85.7012 cv
160.012 85.7012 159.566 85.7139 158.908 85.7383 cv
158.834 85.7012 158.809 85.502 158.883 85.4287 cv
159.268 85.3906 li
159.987 85.3164 160.012 85.1426 160.012 83.8154 cv
160.012 83.1826 li
160.012 82.501 159.975 82.3389 159.615 81.6445 cv
158.151 78.791 li
157.729 77.9727 157.543 77.9102 157.172 77.8486 cv
156.824 77.7861 li
156.75 77.6992 156.762 77.5264 156.85 77.4766 cv
157.246 77.501 157.692 77.5137 158.288 77.5137 cv
158.858 77.5137 159.305 77.501 159.615 77.4766 cv
159.727 77.5137 159.727 77.7109 159.652 77.7861 cv
159.491 77.8115 li
159.057 77.873 158.971 77.9355 158.971 78.0342 cv
158.971 78.1582 159.293 78.8662 159.355 78.9902 cv
159.814 79.9082 160.273 80.8877 160.757 81.7441 cv
161.141 81.0859 161.551 80.3672 161.923 79.6475 cv
162.27 79.002 162.729 78.1582 162.729 78.0098 cv
162.729 77.9355 162.506 77.8486 162.208 77.8115 cv
161.984 77.7861 li
161.898 77.6992 161.91 77.5264 162.01 77.4766 cv
162.456 77.501 162.816 77.5137 163.201 77.5137 cv
163.585 77.5137 163.933 77.501 164.354 77.4766 cv
164.453 77.5381 164.466 77.7109 164.379 77.7861 cv
164.031 77.8486 li
163.387 77.96 163.015 78.7422 162.395 79.8086 cv
161.613 81.1611 li
161.066 82.1035 161.029 82.2148 161.029 83.1699 cv
161.029 83.8154 li
cp
f
167.378 85.8994 mo
166.336 85.8994 165.678 85.5771 165.443 85.4404 cv
165.294 85.168 165.133 84.2871 165.106 83.7041 cv
165.17 83.6172 165.355 83.5918 165.405 83.667 cv
165.592 84.2998 166.1 85.5146 167.539 85.5146 cv
168.581 85.5146 169.09 84.833 169.09 84.0889 cv
169.09 83.543 168.979 82.9346 168.072 82.3516 cv
166.895 81.583 li
166.273 81.1729 165.555 80.4658 165.555 79.4492 cv
165.555 78.2705 166.473 77.3154 168.085 77.3154 cv
168.47 77.3154 168.916 77.3896 169.238 77.4766 cv
169.399 77.5264 169.574 77.5508 169.673 77.5508 cv
169.785 77.8486 169.896 78.543 169.896 79.0645 cv
169.847 79.1387 169.648 79.1758 169.586 79.1016 cv
169.425 78.5059 169.09 77.6992 167.898 77.6992 cv
166.684 77.6992 166.423 78.5059 166.423 79.0771 cv
166.423 79.7949 167.018 80.3174 167.477 80.6025 cv
168.47 81.2227 li
169.251 81.707 170.021 82.4258 170.021 83.6045 cv
170.021 84.9697 168.99 85.8994 167.378 85.8994 cv
f
172.857 79.3994 mo
172.857 78.084 172.833 77.873 172.102 77.8115 cv
171.791 77.7861 li
171.717 77.7373 171.741 77.5137 171.816 77.4766 cv
172.436 77.501 172.857 77.5137 173.378 77.5137 cv
173.875 77.5137 174.297 77.501 174.917 77.4766 cv
174.992 77.5137 175.017 77.7373 174.941 77.7861 cv
174.632 77.8115 li
173.9 77.873 173.875 78.084 173.875 79.3994 cv
173.875 83.8154 li
173.875 85.1309 173.9 85.3047 174.632 85.3906 cv
174.941 85.4287 li
175.017 85.4775 174.992 85.7012 174.917 85.7383 cv
174.297 85.7139 173.875 85.7012 173.378 85.7012 cv
172.857 85.7012 172.436 85.7139 171.816 85.7383 cv
171.741 85.7012 171.717 85.5029 171.791 85.4287 cv
172.102 85.3906 li
172.833 85.3047 172.857 85.1309 172.857 83.8154 cv
172.857 79.3994 li
cp
f
177.57 78.3691 mo
178.476 77.6621 179.629 77.3154 180.92 77.3154 cv
181.59 77.3154 182.532 77.4512 183.115 77.6133 cv
183.264 77.6504 183.351 77.6748 183.463 77.6621 cv
183.475 77.9482 183.537 78.7295 183.637 79.4863 cv
183.574 79.5732 183.389 79.585 183.301 79.5107 cv
183.115 78.667 182.557 77.6992 180.758 77.6992 cv
178.859 77.6992 177.247 78.9033 177.247 81.4707 cv
177.247 84.0762 178.897 85.5146 180.932 85.5146 cv
182.532 85.5146 183.239 84.4727 183.524 83.7412 cv
183.611 83.6787 183.797 83.7041 183.848 83.791 cv
183.76 84.4355 183.438 85.2549 183.252 85.4902 cv
183.103 85.5146 182.953 85.5645 182.817 85.6143 cv
182.545 85.7139 181.651 85.8994 180.857 85.8994 cv
179.74 85.8994 178.674 85.6768 177.769 85.0684 cv
176.775 84.3857 176.007 83.2568 176.007 81.6572 cv
176.007 80.2803 176.627 79.1016 177.57 78.3691 cv
f
187.49 85.8994 mo
186.448 85.8994 185.791 85.5771 185.555 85.4404 cv
185.406 85.168 185.244 84.2871 185.22 83.7041 cv
185.282 83.6172 185.469 83.5918 185.518 83.667 cv
185.704 84.2998 186.213 85.5146 187.651 85.5146 cv
188.693 85.5146 189.202 84.833 189.202 84.0889 cv
189.202 83.543 189.09 82.9346 188.186 82.3516 cv
187.006 81.583 li
186.386 81.1729 185.666 80.4658 185.666 79.4492 cv
185.666 78.2705 186.584 77.3154 188.197 77.3154 cv
188.582 77.3154 189.028 77.3896 189.352 77.4766 cv
189.511 77.5264 189.686 77.5508 189.785 77.5508 cv
189.896 77.8486 190.008 78.543 190.008 79.0645 cv
189.959 79.1387 189.76 79.1758 189.698 79.1016 cv
189.537 78.5059 189.202 77.6992 188.011 77.6992 cv
186.795 77.6992 186.535 78.5059 186.535 79.0771 cv
186.535 79.7949 187.131 80.3174 187.59 80.6025 cv
188.582 81.2227 li
189.363 81.707 190.133 82.4258 190.133 83.6045 cv
190.133 84.9697 189.104 85.8994 187.49 85.8994 cv
f
196.69 79.374 mo
196.69 78.0723 196.666 77.873 195.885 77.8115 cv
195.574 77.7861 li
195.5 77.7373 195.524 77.5137 195.599 77.4766 cv
196.293 77.501 196.715 77.5137 197.211 77.5137 cv
197.695 77.5137 198.117 77.501 198.737 77.4766 cv
198.812 77.5137 198.836 77.7373 198.762 77.7861 cv
198.465 77.8115 li
197.732 77.873 197.707 78.0723 197.707 79.374 cv
197.707 83.6914 li
197.707 84.4727 197.745 84.7959 197.969 85.0313 cv
198.104 85.168 198.34 85.3164 199.32 85.3164 cv
200.375 85.3164 200.635 85.2666 200.834 85.1553 cv
201.082 85.0068 201.404 84.5596 201.652 83.9268 cv
201.727 83.8652 201.962 83.915 201.962 84.002 cv
201.962 84.1377 201.615 85.4033 201.441 85.7383 cv
200.809 85.7139 199.631 85.7012 198.353 85.7012 cv
197.211 85.7012 li
196.69 85.7012 196.293 85.7139 195.599 85.7383 cv
195.524 85.7012 195.5 85.5029 195.574 85.4287 cv
195.946 85.3906 li
196.666 85.3164 196.69 85.1426 196.69 83.8408 cv
196.69 79.374 li
cp
f
205.321 81.7188 mo
205.223 82.0039 205.234 82.0166 205.582 82.0166 cv
207.107 82.0166 li
207.468 82.0166 207.492 81.9668 207.381 81.6318 cv
206.711 79.6104 li
206.611 79.3125 206.5 78.9775 206.426 78.8281 cv
206.4 78.8281 li
206.363 78.8906 206.239 79.1885 206.103 79.5605 cv
205.321 81.7188 li
cp
207.777 82.8223 mo
207.69 82.5498 207.641 82.5127 207.27 82.5127 cv
205.396 82.5127 li
205.086 82.5127 205.012 82.5498 204.924 82.8105 cv
204.49 84.1133 li
204.305 84.6719 204.218 85.0068 204.218 85.1426 cv
204.218 85.292 204.279 85.3652 204.577 85.3906 cv
204.986 85.4287 li
205.073 85.4893 205.073 85.6885 204.961 85.7383 cv
204.639 85.7139 204.254 85.7139 203.672 85.7012 cv
203.262 85.7012 202.815 85.7256 202.48 85.7383 cv
202.406 85.6885 202.381 85.4893 202.455 85.4287 cv
202.865 85.3906 li
203.162 85.3652 203.436 85.2295 203.609 84.7822 cv
203.832 84.2129 204.18 83.4053 204.701 82.0166 cv
205.968 78.667 li
206.141 78.2207 206.215 77.9854 206.178 77.7861 cv
206.475 77.6982 206.686 77.4766 206.822 77.3154 cv
206.896 77.3154 206.983 77.3398 207.008 77.4268 cv
207.17 77.9727 207.368 78.543 207.555 79.0889 cv
209.254 84.0762 li
209.613 85.1426 209.775 85.3291 210.309 85.3906 cv
210.643 85.4287 li
210.73 85.4893 210.705 85.6885 210.643 85.7383 cv
210.135 85.7139 209.7 85.7012 209.143 85.7012 cv
208.547 85.7012 208.075 85.7256 207.715 85.7383 cv
207.616 85.6885 207.604 85.4893 207.69 85.4287 cv
208.051 85.3906 li
208.311 85.3652 208.484 85.292 208.484 85.168 cv
208.484 85.0313 208.422 84.8076 208.323 84.5098 cv
207.777 82.8223 li
cp
f
213.666 83.6543 mo
213.666 84.1006 213.691 84.7334 213.927 85.0068 cv
214.162 85.292 214.535 85.3535 214.906 85.3535 cv
216.011 85.3535 216.854 84.8574 216.854 83.6172 cv
216.854 82.6367 216.357 81.4961 214.386 81.4961 cv
213.716 81.4961 213.666 81.5703 213.666 81.8184 cv
213.666 83.6543 li
cp
213.666 80.7764 mo
213.666 81.124 213.679 81.1484 214.311 81.124 cv
215.576 81.0742 216.259 80.7021 216.259 79.5361 cv
216.259 78.3203 215.353 77.8613 214.41 77.8613 cv
214.138 77.8613 213.951 77.8857 213.84 77.9355 cv
213.716 77.9727 213.666 78.0342 213.666 78.2578 cv
213.666 80.7764 li
cp
212.648 79.126 mo
212.648 78.208 212.6 77.9727 212.041 77.9229 cv
211.645 77.8857 li
211.545 77.8115 211.557 77.625 211.656 77.5752 cv
212.326 77.5137 213.17 77.4766 214.324 77.4766 cv
215.105 77.4766 215.85 77.5381 216.408 77.8242 cv
216.941 78.084 217.351 78.5801 217.351 79.374 cv
217.351 80.2676 216.83 80.7266 216.086 81.0742 cv
216.086 81.1982 216.185 81.2354 216.32 81.2598 cv
216.99 81.3828 217.983 82.0039 217.983 83.332 cv
217.983 84.7705 216.916 85.7383 214.684 85.7383 cv
214.324 85.7383 213.716 85.7012 213.195 85.7012 cv
212.648 85.7012 212.227 85.7256 211.768 85.7383 cv
211.693 85.7012 211.669 85.5029 211.743 85.4287 cv
211.967 85.3906 li
212.624 85.2793 212.648 85.1426 212.648 83.8408 cv
212.648 79.126 li
cp
f
226.924 81.9551 mo
226.924 79.9082 226.019 77.6992 223.648 77.6992 cv
222.359 77.6992 220.684 78.5801 220.684 81.2969 cv
220.684 83.1328 221.578 85.5146 224.021 85.5146 cv
225.51 85.5146 226.924 84.3984 226.924 81.9551 cv
219.443 81.6943 mo
219.443 79.2129 221.305 77.3154 223.859 77.3154 cv
226.726 77.3154 228.164 79.3867 228.164 81.5703 cv
228.164 84.0762 226.254 85.8994 223.859 85.8994 cv
221.105 85.8994 219.443 83.9268 219.443 81.6943 cv
f
231.324 81.1611 mo
231.324 81.3838 231.324 81.5205 231.361 81.5703 cv
231.398 81.6074 231.584 81.6318 232.217 81.6318 cv
232.664 81.6318 233.135 81.583 233.494 81.3096 cv
233.83 81.0488 234.115 80.6152 234.115 79.7715 cv
234.115 78.791 233.508 77.8613 232.131 77.8613 cv
231.361 77.8613 231.324 77.9102 231.324 78.2578 cv
231.324 81.1611 li
cp
230.307 79.3867 mo
230.307 78.208 230.27 77.9971 229.761 77.9355 cv
229.363 77.8857 li
229.277 77.8242 229.277 77.625 229.377 77.5752 cv
230.07 77.5137 230.927 77.4766 232.143 77.4766 cv
232.912 77.4766 233.644 77.5381 234.215 77.8477 cv
234.81 78.1582 235.244 78.7168 235.244 79.585 cv
235.244 80.7637 234.313 81.4092 233.693 81.6572 cv
233.631 81.7314 233.693 81.8555 233.756 81.9551 cv
234.748 83.5547 235.405 84.5479 236.249 85.2549 cv
236.46 85.4404 236.77 85.5771 237.105 85.6016 cv
237.167 85.627 237.18 85.7256 237.117 85.7754 cv
237.006 85.8125 236.807 85.8379 236.571 85.8379 cv
235.518 85.8379 234.885 85.5273 234.004 84.2744 cv
233.681 83.8154 233.172 82.96 232.787 82.4014 cv
232.602 82.1289 232.403 82.0039 231.906 82.0039 cv
231.349 82.0039 231.324 82.0156 231.324 82.2773 cv
231.324 83.8408 li
231.324 85.1426 231.349 85.292 232.068 85.3896 cv
232.328 85.4287 li
232.403 85.4902 232.379 85.7012 232.303 85.7383 cv
231.746 85.7139 231.324 85.7012 230.828 85.7012 cv
230.307 85.7012 229.859 85.7139 229.277 85.7383 cv
229.203 85.7012 229.178 85.5146 229.252 85.4287 cv
229.563 85.3896 li
230.281 85.3047 230.307 85.1426 230.307 83.8408 cv
230.307 79.3867 li
cp
f
239.93 81.7188 mo
239.83 82.0039 239.842 82.0166 240.189 82.0166 cv
241.715 82.0166 li
242.076 82.0166 242.1 81.9668 241.988 81.6318 cv
241.318 79.6104 li
241.219 79.3125 241.107 78.9775 241.033 78.8281 cv
241.008 78.8281 li
240.971 78.8906 240.848 79.1885 240.711 79.5605 cv
239.93 81.7188 li
cp
242.385 82.8223 mo
242.299 82.5498 242.249 82.5127 241.877 82.5127 cv
240.004 82.5127 li
239.693 82.5127 239.619 82.5498 239.532 82.8105 cv
239.098 84.1133 li
238.912 84.6719 238.826 85.0068 238.826 85.1426 cv
238.826 85.292 238.887 85.3652 239.186 85.3906 cv
239.594 85.4287 li
239.682 85.4893 239.682 85.6885 239.569 85.7383 cv
239.247 85.7139 238.862 85.7139 238.279 85.7012 cv
237.869 85.7012 237.424 85.7256 237.088 85.7383 cv
237.014 85.6885 236.989 85.4893 237.063 85.4287 cv
237.473 85.3906 li
237.771 85.3652 238.043 85.2295 238.217 84.7822 cv
238.44 84.2129 238.788 83.4053 239.309 82.0166 cv
240.574 78.667 li
240.748 78.2207 240.822 77.9854 240.785 77.7861 cv
241.083 77.6982 241.294 77.4766 241.43 77.3154 cv
241.505 77.3154 241.592 77.3398 241.617 77.4268 cv
241.777 77.9727 241.977 78.543 242.162 79.0889 cv
243.861 84.0762 li
244.221 85.1426 244.383 85.3291 244.916 85.3906 cv
245.251 85.4287 li
245.338 85.4893 245.313 85.6885 245.251 85.7383 cv
244.742 85.7139 244.309 85.7012 243.75 85.7012 cv
243.154 85.7012 242.684 85.7256 242.323 85.7383 cv
242.225 85.6885 242.212 85.4893 242.299 85.4287 cv
242.658 85.3906 li
242.919 85.3652 243.093 85.292 243.093 85.168 cv
243.093 85.0313 243.03 84.8076 242.932 84.5098 cv
242.385 82.8223 li
cp
f
248.994 83.8408 mo
248.994 85.1426 249.02 85.3291 249.738 85.3906 cv
250.136 85.4287 li
250.21 85.4775 250.186 85.7012 250.111 85.7383 cv
249.404 85.7139 248.982 85.7012 248.486 85.7012 cv
247.99 85.7012 247.555 85.7139 246.762 85.7383 cv
246.688 85.7012 246.662 85.4902 246.762 85.4287 cv
247.208 85.3906 li
247.915 85.3291 247.977 85.1426 247.977 83.8408 cv
247.977 78.2949 li
247.977 77.9102 247.977 77.8984 247.605 77.8984 cv
246.923 77.8984 li
246.389 77.8984 245.707 77.9229 245.396 78.208 cv
245.099 78.4814 244.974 78.7539 244.838 79.0645 cv
244.739 79.1387 244.565 79.0771 244.515 78.9775 cv
244.715 78.4189 244.9 77.625 244.987 77.1289 cv
245.024 77.1045 245.186 77.0918 245.223 77.1289 cv
245.297 77.5264 245.707 77.5137 246.277 77.5137 cv
251.302 77.5137 li
251.972 77.5137 252.084 77.4893 252.27 77.166 cv
252.332 77.1416 252.468 77.1533 252.492 77.2031 cv
252.356 77.7119 252.27 78.7168 252.307 79.0889 cv
252.257 79.1885 252.046 79.1885 251.984 79.1143 cv
251.947 78.8037 251.859 78.3447 251.674 78.208 cv
251.389 77.9971 250.917 77.8984 250.234 77.8984 cv
249.354 77.8984 li
248.982 77.8984 248.994 77.9102 248.994 78.3193 cv
248.994 83.8408 li
cp
f
260.652 81.9551 mo
260.652 79.9082 259.746 77.6992 257.377 77.6992 cv
256.086 77.6992 254.412 78.5801 254.412 81.2969 cv
254.412 83.1328 255.305 85.5146 257.749 85.5146 cv
259.237 85.5146 260.652 84.3984 260.652 81.9551 cv
253.172 81.6943 mo
253.172 79.2129 255.032 77.3154 257.588 77.3154 cv
260.453 77.3154 261.893 79.3867 261.893 81.5703 cv
261.893 84.0762 259.982 85.8994 257.588 85.8994 cv
254.834 85.8994 253.172 83.9268 253.172 81.6943 cv
f
265.361 81.1611 mo
265.361 81.3838 265.361 81.5205 265.398 81.5703 cv
265.436 81.6074 265.621 81.6318 266.254 81.6318 cv
266.701 81.6318 267.172 81.583 267.531 81.3096 cv
267.867 81.0488 268.152 80.6152 268.152 79.7715 cv
268.152 78.791 267.545 77.8613 266.168 77.8613 cv
265.398 77.8613 265.361 77.9102 265.361 78.2578 cv
265.361 81.1611 li
cp
264.344 79.3867 mo
264.344 78.208 264.307 77.9971 263.798 77.9355 cv
263.4 77.8857 li
263.314 77.8242 263.314 77.625 263.414 77.5752 cv
264.107 77.5137 264.964 77.4766 266.18 77.4766 cv
266.949 77.4766 267.681 77.5381 268.252 77.8477 cv
268.847 78.1582 269.281 78.7168 269.281 79.585 cv
269.281 80.7637 268.351 81.4092 267.73 81.6572 cv
267.668 81.7314 267.73 81.8555 267.793 81.9551 cv
268.785 83.5547 269.442 84.5479 270.286 85.2549 cv
270.497 85.4404 270.807 85.5771 271.143 85.6016 cv
271.204 85.627 271.216 85.7256 271.154 85.7754 cv
271.043 85.8125 270.844 85.8379 270.608 85.8379 cv
269.555 85.8379 268.922 85.5273 268.041 84.2744 cv
267.717 83.8154 267.209 82.96 266.824 82.4014 cv
266.639 82.1289 266.44 82.0039 265.943 82.0039 cv
265.386 82.0039 265.361 82.0156 265.361 82.2773 cv
265.361 83.8408 li
265.361 85.1426 265.386 85.292 266.105 85.3896 cv
266.365 85.4287 li
266.44 85.4902 266.416 85.7012 266.34 85.7383 cv
265.783 85.7139 265.361 85.7012 264.865 85.7012 cv
264.344 85.7012 263.896 85.7139 263.314 85.7383 cv
263.24 85.7012 263.215 85.5146 263.289 85.4287 cv
263.6 85.3896 li
264.318 85.3047 264.344 85.1426 264.344 83.8408 cv
264.344 79.3867 li
cp
f
274.612 83.8154 mo
274.612 85.1426 274.688 85.3418 275.357 85.3906 cv
275.828 85.4287 li
275.902 85.502 275.878 85.7012 275.804 85.7383 cv
275.034 85.7139 274.612 85.7012 274.116 85.7012 cv
273.596 85.7012 273.148 85.7139 272.491 85.7383 cv
272.417 85.7012 272.393 85.502 272.466 85.4287 cv
272.852 85.3906 li
273.57 85.3164 273.596 85.1426 273.596 83.8154 cv
273.596 83.1826 li
273.596 82.501 273.559 82.3389 273.198 81.6445 cv
271.734 78.791 li
271.313 77.9727 271.127 77.9102 270.754 77.8486 cv
270.407 77.7861 li
270.332 77.6992 270.346 77.5264 270.432 77.4766 cv
270.829 77.501 271.275 77.5137 271.871 77.5137 cv
272.441 77.5137 272.889 77.501 273.198 77.4766 cv
273.311 77.5137 273.311 77.7109 273.235 77.7861 cv
273.074 77.8115 li
272.641 77.873 272.553 77.9355 272.553 78.0342 cv
272.553 78.1582 272.876 78.8662 272.938 78.9902 cv
273.396 79.9082 273.855 80.8877 274.34 81.7441 cv
274.725 81.0859 275.133 80.3672 275.506 79.6475 cv
275.854 79.002 276.313 78.1582 276.313 78.0098 cv
276.313 77.9355 276.089 77.8486 275.791 77.8115 cv
275.568 77.7861 li
275.48 77.6992 275.493 77.5264 275.592 77.4766 cv
276.039 77.501 276.398 77.5137 276.783 77.5137 cv
277.168 77.5137 277.516 77.501 277.938 77.4766 cv
278.037 77.5381 278.049 77.7109 277.962 77.7861 cv
277.615 77.8486 li
276.97 77.96 276.598 78.7422 275.977 79.8086 cv
275.195 81.1611 li
274.65 82.1035 274.612 82.2148 274.612 83.1699 cv
274.612 83.8154 li
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
%%EOF
%apl.logo.small.horizontal.white.eps
%
%</apl.logo.small.horizontal.white.eps>
%\fi
\endinput
