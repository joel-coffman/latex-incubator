% \iffalse meta-comment
%
% Copyright (C) 2016 by Joel Coffman
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.2
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%   http://www.latex-project.org/lppl.txt
%
% and version 1.2 or later is part of all distributions of LaTeX
% version 1999/12/01 or later.
%
% \fi
%
% \iffalse
%<*driver>
\documentclass{ltxdoc}
\input{.version}

\usepackage{hyperref}
\usepackage{microtype}
\usepackage{minted}

\usepackage{email}
\usepackage{minted-doc}
\usepackage{schedule}

\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{schedule.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
% {Upper-case   \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
% Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
% Digits        \0\1\2\3\4\5\6\7\8\9
% Exclamation   \!     Double quote  \"     Hash (number) \#
% Dollar        \$     Percent       \%     Ampersand     \&
% Acute accent  \'     Left paren    \(     Right paren   \)
% Asterisk      \*     Plus          \+     Comma         \,
% Minus         \-     Point         \.     Solidus       \/
% Colon         \:     Semicolon     \;     Less than     \<
% Equals        \=     Greater than  \>     Question mark \?
% Commercial at \@     Left bracket  \[     Backslash     \\
% Right bracket \]     Circumflex    \^     Underscore    \_
% Grave accent  \`     Left brace    \{     Vertical bar  \|
% Right brace   \}     Tilde         \~}
%
%
% \changes{0.0.1}{2016/06/28}{Initial version}
%
% \GetFileInfo{schedule.sty}
%
% \DoNotIndex{\#,\$,\%,\&,\@,\\,\{,\},\^,\_,\~,\ }
% \DoNotIndex{\@ne}
% \DoNotIndex{\advance,\begingroup,\catcode,\closein}
% \DoNotIndex{\closeout,\day,\def,\edef,\else,\empty,\endgroup}
% \DoNotIndex{\global,\let,\relax}
%
% \title{The \textsf{schedule} package\thanks{This
% document corresponds to \textsf{schedule~\fileversion-\version, dated \filedate.}}}
% \author{Joel Coffman\\\email{joel.coffman@jhu.edu}}
%
% \maketitle
%
% \begin{abstract}
% A course outline provides an overview of the course schedule.
% \end{abstract}
%
% \section{Usage}\label{section:usage}
%
% \DescribeMacro{class}
% The |class| macro displays the current class meeting number.
% It can be used to create a numbered list of meetings (or modules), e.g., as part of a table.
% For example,
% \begin{VerbatimOut}[gobble=1]{minted/class.out}
% \class, \class, \class
% \end{VerbatimOut}
% \inputminted[gobble=1]{latex}{minted/class.out}
% produces \input{minted/class.out}.
%
% \DescribeMacro{classdate}
% The |classdate| macro displays the date of the current class meeting.
% For example,
% \begin{VerbatimOut}[gobble=1]{minted/classdate.out}
% \classdate
% \end{VerbatimOut}
% \inputminted[gobble=1]{latex}{minted/classdate.out}
% produces \input{minted/classdate.out}.
% An optional argument (following the ISO 8601 \texttt{YYYY-MM-DD} format) specifies the date of that class---e.g.,
% \begin{VerbatimOut}[gobble=1]{minted/classdate.out}
% \classdate[2018-06-27]
% \end{VerbatimOut}
% \inputminted[gobble=1]{latex}{minted/classdate.out}
% produces \input{minted/classdate.out}.
%
% \DescribeMacro{setclassdays}
% Most classes meet periodically (e.g., Monday, Wednesday, and Friday), and |setclassdays| allows specifying the meeting days:
% \begin{VerbatimOut}[gobble=1]{minted/setclassdays.out}
% \setclassdays{Monday,Wednesday,Friday}
% The first day is \classdate[2018-06-27], and the second is \classdate.
% \end{VerbatimOut}
% \inputminted[gobble=1]{latex}{minted/setclassdays.out}
% As demonstrated by this example, the intervening days are automatically skipped: \input{minted/setclassdays.out}
%
% \DescribeMacro{setclassfrequency}
% In many cases, |setclassdays| is sufficient to specify the class meetings, but occasionally classes have more complex schedules.
% For example, classes that meet every other weekday---alternating between Monday, Wednesday, and Friday one week and Tuesday and Thursday the next week---can be specified by setting the frequency of class meetings to every two days.
% For example,
% \begin{VerbatimOut}[gobble=1]{minted/setclassfrequency.out}
% \setclassdays{Monday,Tuesday,Wednesday,Thursday,Friday}
% \setclassfrequency{2}
% The first day is \classdate[2018-06-28], and the second is \classdate.
% \end{VerbatimOut}
% \inputminted[gobble=1]{latex}{minted/setclassfrequency.out}
% Here, the Thursday meeting is followed by the next class day, which is a Monday: \input{minted/setclassfrequency.out}
%
% \StopEventually{
%   \PrintChanges
%   \PrintIndex
% }
%
% \appendix
%
% \iffalse
%<*package>
% \fi
%
% \section{Implementation}
% This section documents the implementation of the package.
%
% Require \LaTeXe.
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
%    \end{macrocode}
% Identify package and version.
%    \begin{macrocode}
\ProvidesPackage{schedule}[%
    2018/07/05 %
    v0.0.6 %
    A course outline provides an overview of the course schedule.%
]
%    \end{macrocode}
%
% \subsection{Options}
% Declare a conditional to control printing dates.
%    \begin{macrocode}
\newif\ifschedule@option@nodates\relax
%    \end{macrocode}
% Declare the \textsf{nodates} option.
%    \begin{macrocode}
\DeclareOption{nodates}{
%    \end{macrocode}
% Set the \textsf{nodates} flag.
%    \begin{macrocode}
  \schedule@option@nodatestrue
%    \end{macrocode}
%    \begin{macrocode}
}
%    \end{macrocode}
% \changes{0.0.5}{2016/10/06}{
%   Add the `nodates' option
% }
%
% Process options.
% \mintinline{latex}{\relax} avoids unnecessary lookahead due to the starred form of \mintinline{latex}{\ProcessOptions}.
%    \begin{macrocode}
\ProcessOptions\relax
%    \end{macrocode}
%
% \subsection{Packages}
% Load packages required by this one.
%
%    \begin{macrocode}
\RequirePackage{datenumber}
\RequirePackage{datetime}
\RequirePackage{etoolbox}
\RequirePackage{hanging}
\RequirePackage{pgffor}
\RequirePackage{trimspaces}
%    \end{macrocode}
%
% \subsection{Configuration}
%
% \begin{macro}{bibentry}
% The |bibentry| macro from the \textsf{bibentry} package does not work well with the default formatting.
% Redefine it so the desired formatting is preserved.
%    \begin{macrocode}
\AtBeginDocument{
  \@ifpackageloaded{bibentry}{
%    \end{macrocode}
% Save the existing |bibentry| macro.
%    \begin{macrocode}
    \let\@old@bibentry=\bibentry\relax
%    \end{macrocode}
% Redefine the |bibentry| macro.
%    \begin{macrocode}
    \renewcommand{\bibentry}[1]{%
%    \end{macrocode}
% The hanging indent is lost without setting the font shape.
% (Undoubtedly setting the font shape has a convenient side effect that produces the desired behavior.)
%    \begin{macrocode}
      \textnormal{\@old@bibentry{#1}}%
%    \begin{macrocode}
    }%
%    \end{macrocode}
%    \begin{macrocode}
  }{}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{usdate}
% Use the default date style for \TeX{} and \LaTeX{} rather than \textsf{datetime}'s default.
%    \begin{macrocode}
\usdate
%    \end{macrocode}
% \end{macro}
%
% \subsection{Macros}
% This section describes the macros in the \textsf{schedule} package.
%
% \begin{macro}{class}
% Declare class meeting counter.
%    \begin{macrocode}
\newcounter{class}
%    \end{macrocode}
% Define the |class| macro.
%    \begin{macrocode}
\newcommand{\class}{%
%    \end{macrocode}
% Increment counter.
%    \begin{macrocode}
  \stepcounter{class}%
%    \end{macrocode}
% Display class meeting number.
%    \begin{macrocode}
  \arabic{class}%
%    \end{macrocode}
%    \begin{macrocode}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{setclassdays}
% Define the |setclassdays| macro.
%    \begin{macrocode}
\newcommand{\setclassdays}[1]{%
%    \end{macrocode}
% Save the class's meeting days.
% Global assignment is required so the information is accessible outside of enclosing groups.
%    \begin{macrocode}
  \global\def\schedule@class@days{#1}%
%    \end{macrocode}
%    \begin{macrocode}
}%
%    \end{macrocode}
% Assume classes meet daily (Monday--Friday) by default.
%    \begin{macrocode}
\setclassdays{Monday,Tuesday,Wednesday,Thursday,Friday}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{setclassfrequency}
% Define the |setclassfrequency| macro.
%    \begin{macrocode}
\newcounter{schedule@class@frequency}%
\newcommand*{\setclassfrequency}[1]{%
%    \end{macrocode}
% Save the class's meeting days.
% Global assignment is required so the information is accessible outside of enclosing groups.
%    \begin{macrocode}
  \setcounter{schedule@class@frequency}{#1}%
%    \end{macrocode}
%    \begin{macrocode}
}
%    \end{macrocode}
% Assume classes meet daily by default.
% Note that the meeting days are specified using the |setclassdays| macro, and a class meeting will only appear on the appropriate day of the week.
%    \begin{macrocode}
\setclassfrequency{1}
%    \end{macrocode}
% \changes{0.0.6}{2018/07/05}{
%   Add the `setclassfrequency' macro
% }
% \end{macro}
%
% \begin{macro}{module@par}
% Define the |module@par| macro.
%    \begin{macrocode}
\newcommand{\module@par}[1]{%
%    \end{macrocode}
% Fill available horizontal space.
%    \begin{macrocode}
  \parbox[t]{\linewidth}{%
%    \end{macrocode}
% Allow ragged breaks.
% The available breaks in table columns are often limited and stretching makes the text can be difficult to read.
%    \begin{macrocode}
    \raggedright%
%    \end{macrocode}
% Use a hanging indent to differentiate paragraphs.
%    \begin{macrocode}
    \begin{hangparas}{1em}{1}%
%    \end{macrocode}
% Print the contents.
%    \begin{macrocode}
      \trim@spaces{#1}%
%    \end{macrocode}
% |strut| provides the typical spacing after the paragraph, which is otherwise lost when the parbox appears in a table.
% If in vertical mode (e.g., following a list), then additional spacing is typically unnecessary, but
% |strut| should follow the last itemize (see the \textsf{enumitem} package for information about adding a |strut| after the item).
%    \begin{macrocode}
      \ifvmode\else\strut\fi%
%    \end{macrocode}
%    \begin{macrocode}
    \end{hangparas}%
  }%
%    \end{macrocode}
%    \begin{macrocode}
}%
%    \end{macrocode}
% \changes{0.0.2}{2016/06/28}{
%   Properly handle vertical spacing after lists
% }
% \changes{0.0.4}{2016/08/26}{
%   Remove whitespace surrounding argument
% }
% \end{macro}
%
% \begin{macro}{@parsedate}
% Define a macro to parse dates in the ISO 8601 \texttt{YYYY-MM-DD} format.
%    \begin{macrocode}
\def\@parsedate#1{\@@parsedate#1\relax}
%    \end{macrocode}
% Helper macro that actually sets the date.
%    \begin{macrocode}
\def\@@parsedate#1-#2-#3\relax{%
  \setdatenumber{#1}{#2}{#3}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{checkclassday}
% Check the current weekday to see if it is a class meeting day.
%
% Define the |ifisclassday| conditional.
%    \begin{macrocode}
\newif\ifisclassday%
%    \end{macrocode}
% Define the |checkclassday| macro.
%    \begin{macrocode}
\newcommand{\checkclassday}[1]{%
%    \end{macrocode}
% Fully expand the argument.
% Full expansion is necessary prior to comparison because the argument may be a macro.
%    \begin{macrocode}
  \edef\current{#1}%
%    \end{macrocode}
% Iterate over the classdays.
%    \begin{macrocode}
  \foreach \day in \schedule@class@days {%
%    \end{macrocode}
% Check to see if the current day is a class meeting day.
%    \begin{macrocode}
    \ifdefequal{\current}{\day}{%
%    \end{macrocode}
% It's a class meeting day.
% Set the conditional (globally, so it is visible outside the current group) and break the loop.
%    \begin{macrocode}
      \global\isclassdaytrue%
      \breakforeach%
    }{}%
%    \end{macrocode}
%    \begin{macrocode}
  }%
%    \end{macrocode}
%    \begin{macrocode}
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{classdate}
% Define the |classdate| macro.
%    \begin{macrocode}
\newcommand{\classdate}[1][\thedateyear-\thedatemonth-\thedateday]{%
%    \end{macrocode}
% Ignore if \texttt{nodate} option set.
%    \begin{macrocode}
  \ifschedule@option@nodates\else%
%    \end{macrocode}
% Parse the date.
%    \begin{macrocode}
    \@parsedate{#1}%
%    \end{macrocode}
% Display the date.
%    \begin{macrocode}
    \thedateday\ \shortmonthname[\thedatemonth]%
%    \end{macrocode}
% Advance to the next class day.
% ^^A FIXME: Use lazy iteration to avoid unnecessary computation
%    \begin{macrocode}
    \isclassdayfalse%
    \foreach \i in {1,2,...,7}{%
      \addtocounter{datenumber}{\theschedule@class@frequency}%
      \setdatebynumber{\thedatenumber}%
      \edef\current{\datedayname}%
      \checkclassday{\current}%
      \ifisclassday%
        \breakforeach%
      \fi%
    }%
%    \end{macrocode}
%    \begin{macrocode}
  \fi% END schedule@option@nodates
%    \end{macrocode}
%    \begin{macrocode}
}%
%    \end{macrocode}
% \changes{0.0.3}{2016/06/28}{
%   Add the classdate macro
% }
% \changes{0.0.5}{2016/10/06}{
%   Ignore date when `nodates' option set
% }
% \end{macro}
%
% \begin{macro}{module}
% Define the |module| macro.
%    \begin{macrocode}
\newcommand{\module}[3][\thedateyear-\thedatemonth-\thedateday]{%
%    \end{macrocode}
% Display the class number, date, lecture topics, and assignments.
%    \begin{macrocode}
  \class & \classdate[#1]%
  & \module@par{#2} & \module@par{#3}%
%    \end{macrocode}
%    \begin{macrocode}
}%
%    \end{macrocode}
% \end{macro}
%
% \iffalse
%</package>
% \fi
%
% \Finale
\endinput
